1st todo:template
1) use getmultiple & show data into template list tables
-- use dataService.get() in controller to get data from database
-- assign server response to $scope object
-- use ng-repeat inside template list
-- show add data into table view with proper data binding
2) integrate pagination in template list with total records
-- create current page object & apply to $scope
-- create total records & apply to $scope
-- create pageChange() method
-- number of items per page object in $scope
3) use filter for my template - only users template will show in table
-- create method to filter templates data
-- send server request with where clause to get related data.
-- assign response to $scope & use inside template
4) integrate pagination in my template list with total records
-- use steps from #2
5) request template - use post method to insert new data into database
-- use template object & apply to $scope as well as form [ng-model]
-- create method for post data of input form
-- use post method to post data to server
-- use callback for response data & assign to $scope
-- after successful insert data into database pass empty {} object to form, so form will reset/erase all input data.
6) use file upload code block in request custom template form
-- use file upload directives for sketch input
-- create hidden input element for post image array to database
-- after successful uploading images to server, enable submit button
-- submit button only enable when all fields are valid.
7) integrate pagination in custom template list with total records
-- use steps from #2
8) use filter for custom template - only users template will show in table which are requested for customize
-- use steps from #3
2nd todo:mailbox
1) use getmultiple & show data into mail list tables
-- use dataService.get() in controller to get data from database
-- assign server response to $scope object
-- use ng-repeat inside mails list
-- show add data into table view with proper data binding
2) integrate pagination in mails list with total records
-- create current page object & apply to $scope
-- create total records & apply to $scope
-- create pageChange() method
-- number of items per page object in $scope
3) use filter for sent mail - only sent mail will show in table
-- create method to filter sent mail data
-- send server request with where clause to get related data.
-- assign response to $scope & use inside sent mail view
4) integrate pagination in sent mail list with total records
-- use steps from #2
5) compose mail/reply mail - use post method to insert new data into database & send mail
-- use compose mail object & apply to $scope as well as form [ng-model]
-- create method for post data of input form
-- use post method to post data to server for send mail & insert into database
-- use callback for response data & assign to $scope
-- after successful sent mail/insert data into database redirect to mail list view
6) use file upload code block for compose mail view - attach file
-- use file upload directives for attach file
-- create hidden input element for post image details with mail
-- send mail button only enable when all fields are valid.
7) integrate pagination in deleted mail list with total records
-- use steps from #2
8) use filter for deleted mails - only user's deleted mails will show in table
-- use steps from #3
3rd todo:business
1) use getmultiple & show data into business list table
-- use dataService.get() in controller to get data from database
-- assign server response to $scope object
-- use ng-repeat inside template list
-- show add data into table view with proper data binding
2) integrate pagination in business list with total records
-- create current page object & apply to $scope
-- create total records & apply to $scope
-- create pageChange() method
-- number of items per page object in $scope
3) create methods for manage buttons
-- create methods - which will use to update database with current row id & column in database
-- send server request with business id, & update column name & column value - like for status send request to server with business id in url, & object with { "status" : "1/0"} in post data
-- use method for edit business
-- use method for active/delete business [this is toggle button if active business show delete button otherwise show active button]
-- use method for publish/unpublish business [toggle button]
-- use method for featured/non-featured business [toggle button]
-- use preview method for preview business in modal window [business will show in modal]